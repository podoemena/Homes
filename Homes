import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import scipy.stats as st
from scipy.stats import skew
from sklearn.metrics import mean_squared_error, r2_score, mean_squared_log_error, r2_score
from sklearn.ensemble import RandomForestRegressor
from sklearn import ensemble
from math import sqrt
from sklearn.model_selection import train_test_split
import csv
import os
​



In [2]:


train=pd.read_csv(r"C:\\Users\\ajodo\Desktop\train.csv")
for col in train.columns: 
    print(col) 



Id
MSSubClass
MSZoning
LotFrontage
LotArea
Street
Alley
LotShape
LandContour
Utilities
LotConfig
LandSlope
Neighborhood
Condition1
Condition2
BldgType
HouseStyle
OverallQual
OverallCond
YearBuilt
YearRemodAdd
RoofStyle
RoofMatl
Exterior1st
Exterior2nd
MasVnrType
MasVnrArea
ExterQual
ExterCond
Foundation
BsmtQual
BsmtCond
BsmtExposure
BsmtFinType1
BsmtFinSF1
BsmtFinType2
BsmtFinSF2
BsmtUnfSF
TotalBsmtSF
Heating
HeatingQC
CentralAir
Electrical
1stFlrSF
2ndFlrSF
LowQualFinSF
GrLivArea
BsmtFullBath
BsmtHalfBath
FullBath
HalfBath
BedroomAbvGr
KitchenAbvGr
KitchenQual
TotRmsAbvGrd
Functional
Fireplaces
FireplaceQu
GarageType
GarageYrBlt
GarageFinish
GarageCars
GarageArea
GarageQual
GarageCond
PavedDrive
WoodDeckSF
OpenPorchSF
EnclosedPorch
3SsnPorch
ScreenPorch
PoolArea
PoolQC
Fence
MiscFeature
MiscVal
MoSold
YrSold
SaleType
SaleCondition
SalePrice
In [3]:



y=train["SalePrice"]
X = train.drop(["SalePrice"], axis=1)
X_train, X_test, y_train, y_test = train_test_split(X, y,test_size = .20, random_state = 0)
X_train.shape, y_train.shape, X_test.shape, y_test.shape
​


Out[3]:
((1168, 80), (1168,), (292, 80), (292,))
In [4]:


train.describe().T


Out[4]:

count
mean
std
min
25%
50%
75%
max
Id
1460.0
730.500000
421.610009
1.0
365.75
730.5
1095.25
1460.0
MSSubClass
1460.0
56.897260
42.300571
20.0
20.00
50.0
70.00
190.0
LotFrontage
1201.0
70.049958
24.284752
21.0
59.00
69.0
80.00
313.0
LotArea
1460.0
10516.828082
9981.264932
1300.0
7553.50
9478.5
11601.50
215245.0
OverallQual
1460.0
6.099315
1.382997
1.0
5.00
6.0
7.00
10.0
OverallCond
1460.0
5.575342
1.112799
1.0
5.00
5.0
6.00
9.0
YearBuilt
1460.0
1971.267808
30.202904
1872.0
1954.00
1973.0
2000.00
2010.0
YearRemodAdd
1460.0
1984.865753
20.645407
1950.0
1967.00
1994.0
2004.00
2010.0
MasVnrArea
1452.0
103.685262
181.066207
0.0
0.00
0.0
166.00
1600.0
BsmtFinSF1
1460.0
443.639726
456.098091
0.0
0.00
383.5
712.25
5644.0
BsmtFinSF2
1460.0
46.549315
161.319273
0.0
0.00
0.0
0.00
1474.0
BsmtUnfSF
1460.0
567.240411
441.866955
0.0
223.00
477.5
808.00
2336.0
TotalBsmtSF
1460.0
1057.429452
438.705324
0.0
795.75
991.5
1298.25
6110.0
1stFlrSF
1460.0
1162.626712
386.587738
334.0
882.00
1087.0
1391.25
4692.0
2ndFlrSF
1460.0
346.992466
436.528436
0.0
0.00
0.0
728.00
2065.0
LowQualFinSF
1460.0
5.844521
48.623081
0.0
0.00
0.0
0.00
572.0
GrLivArea
1460.0
1515.463699
525.480383
334.0
1129.50
1464.0
1776.75
5642.0
BsmtFullBath
1460.0
0.425342
0.518911
0.0
0.00
0.0
1.00
3.0
BsmtHalfBath
1460.0
0.057534
0.238753
0.0
0.00
0.0
0.00
2.0
FullBath
1460.0
1.565068
0.550916
0.0
1.00
2.0
2.00
3.0
HalfBath
1460.0
0.382877
0.502885
0.0
0.00
0.0
1.00
2.0
BedroomAbvGr
1460.0
2.866438
0.815778
0.0
2.00
3.0
3.00
8.0
KitchenAbvGr
1460.0
1.046575
0.220338
0.0
1.00
1.0
1.00
3.0
TotRmsAbvGrd
1460.0
6.517808
1.625393
2.0
5.00
6.0
7.00
14.0
Fireplaces
1460.0
0.613014
0.644666
0.0
0.00
1.0
1.00
3.0
GarageYrBlt
1379.0
1978.506164
24.689725
1900.0
1961.00
1980.0
2002.00
2010.0
GarageCars
1460.0
1.767123
0.747315
0.0
1.00
2.0
2.00
4.0
GarageArea
1460.0
472.980137
213.804841
0.0
334.50
480.0
576.00
1418.0
WoodDeckSF
1460.0
94.244521
125.338794
0.0
0.00
0.0
168.00
857.0
OpenPorchSF
1460.0
46.660274
66.256028
0.0
0.00
25.0
68.00
547.0
EnclosedPorch
1460.0
21.954110
61.119149
0.0
0.00
0.0
0.00
552.0
3SsnPorch
1460.0
3.409589
29.317331
0.0
0.00
0.0
0.00
508.0
ScreenPorch
1460.0
15.060959
55.757415
0.0
0.00
0.0
0.00
480.0
PoolArea
1460.0
2.758904
40.177307
0.0
0.00
0.0
0.00
738.0
MiscVal
1460.0
43.489041
496.123024
0.0
0.00
0.0
0.00
15500.0
MoSold
1460.0
6.321918
2.703626
1.0
5.00
6.0
8.00
12.0
YrSold
1460.0
2007.815753
1.328095
2006.0
2007.00
2008.0
2009.00
2010.0
SalePrice
1460.0
180921.195890
79442.502883
34900.0
129975.00
163000.0
214000.00
755000.0
In [5]:


train.describe()


Out[5]:

Id
MSSubClass
LotFrontage
LotArea
OverallQual
OverallCond
YearBuilt
YearRemodAdd
MasVnrArea
BsmtFinSF1
...
WoodDeckSF
OpenPorchSF
EnclosedPorch
3SsnPorch
ScreenPorch
PoolArea
MiscVal
MoSold
YrSold
SalePrice
count
1460.000000
1460.000000
1201.000000
1460.000000
1460.000000
1460.000000
1460.000000
1460.000000
1452.000000
1460.000000
...
1460.000000
1460.000000
1460.000000
1460.000000
1460.000000
1460.000000
1460.000000
1460.000000
1460.000000
1460.000000
mean
730.500000
56.897260
70.049958
10516.828082
6.099315
5.575342
1971.267808
1984.865753
103.685262
443.639726
...
94.244521
46.660274
21.954110
3.409589
15.060959
2.758904
43.489041
6.321918
2007.815753
180921.195890
std
421.610009
42.300571
24.284752
9981.264932
1.382997
1.112799
30.202904
20.645407
181.066207
456.098091
...
125.338794
66.256028
61.119149
29.317331
55.757415
40.177307
496.123024
2.703626
1.328095
79442.502883
min
1.000000
20.000000
21.000000
1300.000000
1.000000
1.000000
1872.000000
1950.000000
0.000000
0.000000
...
0.000000
0.000000
0.000000
0.000000
0.000000
0.000000
0.000000
1.000000
2006.000000
34900.000000
25%
365.750000
20.000000
59.000000
7553.500000
5.000000
5.000000
1954.000000
1967.000000
0.000000
0.000000
...
0.000000
0.000000
0.000000
0.000000
0.000000
0.000000
0.000000
5.000000
2007.000000
129975.000000
50%
730.500000
50.000000
69.000000
9478.500000
6.000000
5.000000
1973.000000
1994.000000
0.000000
383.500000
...
0.000000
25.000000
0.000000
0.000000
0.000000
0.000000
0.000000
6.000000
2008.000000
163000.000000
75%
1095.250000
70.000000
80.000000
11601.500000
7.000000
6.000000
2000.000000
2004.000000
166.000000
712.250000
...
168.000000
68.000000
0.000000
0.000000
0.000000
0.000000
0.000000
8.000000
2009.000000
214000.000000
max
1460.000000
190.000000
313.000000
215245.000000
10.000000
9.000000
2010.000000
2010.000000
1600.000000
5644.000000
...
857.000000
547.000000
552.000000
508.000000
480.000000
738.000000
15500.000000
12.000000
2010.000000
755000.000000
8 rows × 38 columns
In [6]:


train.info()



<class 'pandas.core.frame.DataFrame'>
RangeIndex: 1460 entries, 0 to 1459
Data columns (total 81 columns):
 #   Column         Non-Null Count  Dtype  
---  ------         --------------  -----  
 0   Id             1460 non-null   int64  
 1   MSSubClass     1460 non-null   int64  
 2   MSZoning       1460 non-null   object 
 3   LotFrontage    1201 non-null   float64
 4   LotArea        1460 non-null   int64  
 5   Street         1460 non-null   object 
 6   Alley          91 non-null     object 
 7   LotShape       1460 non-null   object 
 8   LandContour    1460 non-null   object 
 9   Utilities      1460 non-null   object 
 10  LotConfig      1460 non-null   object 
 11  LandSlope      1460 non-null   object 
 12  Neighborhood   1460 non-null   object 
 13  Condition1     1460 non-null   object 
 14  Condition2     1460 non-null   object 
 15  BldgType       1460 non-null   object 
 16  HouseStyle     1460 non-null   object 
 17  OverallQual    1460 non-null   int64  
 18  OverallCond    1460 non-null   int64  
 19  YearBuilt      1460 non-null   int64  
 20  YearRemodAdd   1460 non-null   int64  
 21  RoofStyle      1460 non-null   object 
 22  RoofMatl       1460 non-null   object 
 23  Exterior1st    1460 non-null   object 
 24  Exterior2nd    1460 non-null   object 
 25  MasVnrType     1452 non-null   object 
 26  MasVnrArea     1452 non-null   float64
 27  ExterQual      1460 non-null   object 
 28  ExterCond      1460 non-null   object 
 29  Foundation     1460 non-null   object 
 30  BsmtQual       1423 non-null   object 
 31  BsmtCond       1423 non-null   object 
 32  BsmtExposure   1422 non-null   object 
 33  BsmtFinType1   1423 non-null   object 
 34  BsmtFinSF1     1460 non-null   int64  
 35  BsmtFinType2   1422 non-null   object 
 36  BsmtFinSF2     1460 non-null   int64  
 37  BsmtUnfSF      1460 non-null   int64  
 38  TotalBsmtSF    1460 non-null   int64  
 39  Heating        1460 non-null   object 
 40  HeatingQC      1460 non-null   object 
 41  CentralAir     1460 non-null   object 
 42  Electrical     1459 non-null   object 
 43  1stFlrSF       1460 non-null   int64  
 44  2ndFlrSF       1460 non-null   int64  
 45  LowQualFinSF   1460 non-null   int64  
 46  GrLivArea      1460 non-null   int64  
 47  BsmtFullBath   1460 non-null   int64  
 48  BsmtHalfBath   1460 non-null   int64  
 49  FullBath       1460 non-null   int64  
 50  HalfBath       1460 non-null   int64  
 51  BedroomAbvGr   1460 non-null   int64  
 52  KitchenAbvGr   1460 non-null   int64  
 53  KitchenQual    1460 non-null   object 
 54  TotRmsAbvGrd   1460 non-null   int64  
 55  Functional     1460 non-null   object 
 56  Fireplaces     1460 non-null   int64  
 57  FireplaceQu    770 non-null    object 
 58  GarageType     1379 non-null   object 
 59  GarageYrBlt    1379 non-null   float64
 60  GarageFinish   1379 non-null   object 
 61  GarageCars     1460 non-null   int64  
 62  GarageArea     1460 non-null   int64  
 63  GarageQual     1379 non-null   object 
 64  GarageCond     1379 non-null   object 
 65  PavedDrive     1460 non-null   object 
 66  WoodDeckSF     1460 non-null   int64  
 67  OpenPorchSF    1460 non-null   int64  
 68  EnclosedPorch  1460 non-null   int64  
 69  3SsnPorch      1460 non-null   int64  
 70  ScreenPorch    1460 non-null   int64  
 71  PoolArea       1460 non-null   int64  
 72  PoolQC         7 non-null      object 
 73  Fence          281 non-null    object 
 74  MiscFeature    54 non-null     object 
 75  MiscVal        1460 non-null   int64  
 76  MoSold         1460 non-null   int64  
 77  YrSold         1460 non-null   int64  
 78  SaleType       1460 non-null   object 
 79  SaleCondition  1460 non-null   object 
 80  SalePrice      1460 non-null   int64  
dtypes: float64(3), int64(35), object(43)
memory usage: 924.0+ KB
In [7]:



corr = train.corr()
corr.sort_values(["SalePrice"], ascending = False, inplace = True)#
print(corr.SalePrice)



SalePrice        1.000000
OverallQual      0.790982
GrLivArea        0.708624
GarageCars       0.640409
GarageArea       0.623431
TotalBsmtSF      0.613581
1stFlrSF         0.605852
FullBath         0.560664
TotRmsAbvGrd     0.533723
YearBuilt        0.522897
YearRemodAdd     0.507101
GarageYrBlt      0.486362
MasVnrArea       0.477493
Fireplaces       0.466929
BsmtFinSF1       0.386420
LotFrontage      0.351799
WoodDeckSF       0.324413
2ndFlrSF         0.319334
OpenPorchSF      0.315856
HalfBath         0.284108
LotArea          0.263843
BsmtFullBath     0.227122
BsmtUnfSF        0.214479
BedroomAbvGr     0.168213
ScreenPorch      0.111447
PoolArea         0.092404
MoSold           0.046432
3SsnPorch        0.044584
BsmtFinSF2      -0.011378
BsmtHalfBath    -0.016844
MiscVal         -0.021190
Id              -0.021917
LowQualFinSF    -0.025606
YrSold          -0.028923
OverallCond     -0.077856
MSSubClass      -0.084284
EnclosedPorch   -0.128578
KitchenAbvGr    -0.135907
Name: SalePrice, dtype: float64
In [8]:



ax = plt.subplots(ncols=1, figsize=(10,10))
corr_matrix = train.corr()
mask = np.zeros_like(corr_matrix)
mask[np.triu_indices_from(mask)] = True
sns.heatmap(corr_matrix, mask=mask, vmin = -1, vmax = 1, center = 0);
plt.show()




In [9]:


sns.distplot(train['SalePrice'], color="b");
plt.show()




In [10]:


Log_Y = train['SalePrice']
sns.distplot(np.log10(Log_Y), color="c");
plt.show()
​




In [11]:


X['MSSubClass'] = X['MSSubClass'].apply(str)
X['YrSold'] = X['YrSold'].astype(str)
X['MoSold'] = X['MoSold'].astype(str)
X['YearRemodAdd'] = X['YearRemodAdd'].astype(str)
X = X.drop(["Id"], axis=1)
​



In [12]:


missingdata = (X.isnull().sum() / len(X)) * 100
print(missingdata)



MSSubClass        0.000000
MSZoning          0.000000
LotFrontage      17.739726
LotArea           0.000000
Street            0.000000
                   ...    
MiscVal           0.000000
MoSold            0.000000
YrSold            0.000000
SaleType          0.000000
SaleCondition     0.000000
Length: 79, dtype: float64
In [13]:



quantitative = [f for f in X.columns if X.dtypes[f] != 'object']
qualitative = [f for f in X.columns if X.dtypes[f] == 'object']



In [14]:



#Fill missing values for quantitative variables
for i in quantitative:
    X.fillna(X.median(), inplace = True)
    #print(i, train[i].median())
    
#Fill missing values for special variables
spec_categ_col =['PoolArea', 'Fence', 'MiscFeature', 'Alley','FireplaceQu']
for i in spec_categ_col:
    X[i] = X[i].fillna('None')
    
#Fill missing values for categorical variables
for i in qualitative:
    X[i].fillna(X[i].mode()[0], inplace = True)
  



In [15]:


X.skew(axis = 0, skipna = True).sort_values(ascending=False)


Out[15]:
MiscVal          24.476794
PoolArea         14.828374
LotArea          12.207688
3SsnPorch        10.304342
LowQualFinSF      9.011341
KitchenAbvGr      4.488397
BsmtFinSF2        4.255261
ScreenPorch       4.122214
BsmtHalfBath      4.103403
EnclosedPorch     3.089872
MasVnrArea        2.677616
LotFrontage       2.409147
OpenPorchSF       2.364342
BsmtFinSF1        1.685503
WoodDeckSF        1.541376
TotalBsmtSF       1.524255
MSSubClass        1.407657
1stFlrSF          1.376757
GrLivArea         1.366560
BsmtUnfSF         0.920268
2ndFlrSF          0.813030
OverallCond       0.693067
TotRmsAbvGrd      0.676341
HalfBath          0.675897
Fireplaces        0.649565
BsmtFullBath      0.596067
OverallQual       0.216944
MoSold            0.212053
BedroomAbvGr      0.211790
GarageArea        0.179981
YrSold            0.096269
FullBath          0.036562
GarageCars       -0.342549
YearRemodAdd     -0.503562
YearBuilt        -0.613461
GarageYrBlt      -0.678333
dtype: float64
In [16]:



Num = 1
if Num <= 1:
    X["LotArea"] = np.log1p(X["LotArea"])
    X["LotFrontage"] = np.log1p(X["LotFrontage"])
    X["GrLivArea"] = np.log1p(X["GrLivArea"])
else:
    num_feats = X.dtypes[X.dtypes != "object"].index
    skewed_feats =X[num_feats].apply(lambda x: skew(x.dropna())).sort_values(ascending=False)
    skewed_feats = skewed_feats[skewed_feats > 0.75]
    skewed_feats = skewed_feats.index
    skewed_feats
    X[skewed_feats] = np.log1p(X[skewed_feats])
​



In [17]:



#Total Floor area of entire house
X['TotalSF']=X['TotalBsmtSF']+ X['1stFlrSF']+ X['2ndFlrSF']
#Total number of baths
X['TotalBath'] = (X['FullBath'] + (0.5 * X['HalfBath']) + X['BsmtFullBath'] + (0.5 * train['BsmtHalfBath']))
#Total porch area
X['TotalPorchSF'] = X['OpenPorchSF'] + X['3SsnPorch'] + X['EnclosedPorch'] + train['ScreenPorch']+ train['WoodDeckSF']
​



In [18]:


X = pd.get_dummies(data=X)



In [19]:



forest_model = RandomForestRegressor(random_state=10, n_estimators=3000)
forest_model.fit(X,y)
forest_train = forest_model.predict(X)
​



In [20]:


#RMSE
print(np.sqrt(mean_squared_error(y,forest_train)))
#Accuracy 
print(r2_score(y, forest_train))
​



10434.95166993628
0.982734760349054
